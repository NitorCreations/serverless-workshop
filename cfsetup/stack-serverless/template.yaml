AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless workshop
Parameters:
  paramDummy:
    Description: Description
    Type: Number
    Default: 42
Resources:
#  resS3Bucket:
#    Type: AWS::S3::Bucket
#    Properties:
#      AccessControl: PublicRead
#      NotificationConfiguration:
#        LambdaConfigurations:
#          Event: s3:ObjectCreated:*
#          Filter:
#            S3Key:
#              Rules:
#                - Name: suffix
#                  Value: .csv
#          Function: {Ref: resIngestLambda}
  resLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: lambda.amazonaws.com}
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - es:*
                Resource: '*'
              - Effect: Allow
                Action:
                 - s3:GetObject
                Resource:
                 - 'Fn::Join': ['', ['arn:aws:s3:::nitor-serverless-workshop/*']]
              - Effect: Allow
                Action:
                 - s3:ListBucket
                Resource:
                 - 'Fn::Join': ['', ['arn:aws:s3:::nitor-serverless-workshop']]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "arn:aws:logs:*:*:*"
  resIngestLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: nitor-serverless-workshop
        S3Key: ingestlambda/ingestlambda.zip
      Description: Ingests CSV to Elasticsearch
      FunctionName: csvToES3
      Handler: ingest.handler
      Role: {"Fn::GetAtt" : ["resLambdaRole", "Arn"] }
      Runtime: nodejs4.3
      Timeout: 120
  resExecuteIngestLambda:
    Type: Custom::ExecuteIngestLambda
    Properties:
      ServiceToken: { "Fn::GetAtt" : ["resIngestLambda", "Arn"] }
      ESEndpoint: { "Fn::GetAtt" : ["resElasticSearch", "DomainEndpoint"] }
      Region: { "Ref" : "AWS::Region" }
      Bucket: nitor-serverless-workshop
      Prefix: /taxdata/
  resElasticSearch:
    Type: AWS::Elasticsearch::Domain
Outputs:
  Bucket:
    Description: 'ElasticSearch endpoint address'
    Value:
      'Fn::GetAtt': ['resElasticSearch', 'DomainEndpoint']
